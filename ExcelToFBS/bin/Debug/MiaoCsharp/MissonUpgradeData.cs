// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MiaoCsharp
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MissonUpgradeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MissonUpgradeData GetRootAsMissonUpgradeData(ByteBuffer _bb) { return GetRootAsMissonUpgradeData(_bb, new MissonUpgradeData()); }
  public static MissonUpgradeData GetRootAsMissonUpgradeData(ByteBuffer _bb, MissonUpgradeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MissonUpgradeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemIdBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetItemIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetItemIdArray() { return __p.__vector_as_array<int>(6); }
  public int ItemNeed(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemNeedLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemNeedBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetItemNeedBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetItemNeedArray() { return __p.__vector_as_array<int>(8); }
  public int ExpNeed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<MiaoCsharp.MissonUpgradeData> CreateMissonUpgradeData(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset itemIdOffset = default(VectorOffset),
      VectorOffset itemNeedOffset = default(VectorOffset),
      int expNeed = 0) {
    builder.StartTable(4);
    MissonUpgradeData.AddExpNeed(builder, expNeed);
    MissonUpgradeData.AddItemNeed(builder, itemNeedOffset);
    MissonUpgradeData.AddItemId(builder, itemIdOffset);
    MissonUpgradeData.AddId(builder, id);
    return MissonUpgradeData.EndMissonUpgradeData(builder);
  }

  public static void StartMissonUpgradeData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddItemId(FlatBufferBuilder builder, VectorOffset itemIdOffset) { builder.AddOffset(1, itemIdOffset.Value, 0); }
  public static VectorOffset CreateItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItemNeed(FlatBufferBuilder builder, VectorOffset itemNeedOffset) { builder.AddOffset(2, itemNeedOffset.Value, 0); }
  public static VectorOffset CreateItemNeedVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemNeedVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemNeedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExpNeed(FlatBufferBuilder builder, int expNeed) { builder.AddInt(3, expNeed, 0); }
  public static Offset<MiaoCsharp.MissonUpgradeData> EndMissonUpgradeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MiaoCsharp.MissonUpgradeData>(o);
  }
};


}
