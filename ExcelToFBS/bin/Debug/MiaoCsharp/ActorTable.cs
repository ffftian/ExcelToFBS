// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MiaoCsharp
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ActorTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ActorTable GetRootAsActorTable(ByteBuffer _bb) { return GetRootAsActorTable(_bb, new ActorTable()); }
  public static ActorTable GetRootAsActorTable(ByteBuffer _bb, ActorTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActorTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MiaoCsharp.ActorData? Datas(int j) { int o = __p.__offset(4); return o != 0 ? (MiaoCsharp.ActorData?)(new MiaoCsharp.ActorData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatasLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MiaoCsharp.ActorTable> CreateActorTable(FlatBufferBuilder builder,
      VectorOffset datasOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ActorTable.AddDatas(builder, datasOffset);
    return ActorTable.EndActorTable(builder);
  }

  public static void StartActorTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatas(FlatBufferBuilder builder, VectorOffset datasOffset) { builder.AddOffset(0, datasOffset.Value, 0); }
  public static VectorOffset CreateDatasVector(FlatBufferBuilder builder, Offset<MiaoCsharp.ActorData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, Offset<MiaoCsharp.ActorData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MiaoCsharp.ActorTable> EndActorTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MiaoCsharp.ActorTable>(o);
  }
  public static void FinishActorTableBuffer(FlatBufferBuilder builder, Offset<MiaoCsharp.ActorTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedActorTableBuffer(FlatBufferBuilder builder, Offset<MiaoCsharp.ActorTable> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
