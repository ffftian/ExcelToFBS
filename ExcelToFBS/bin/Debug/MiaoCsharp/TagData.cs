// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MiaoCsharp
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TagData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TagData GetRootAsTagData(ByteBuffer _bb) { return GetRootAsTagData(_bb, new TagData()); }
  public static TagData GetRootAsTagData(ByteBuffer _bb, TagData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TagData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string Cover(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CoverLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Negative { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNegativeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNegativeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNegativeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<MiaoCsharp.TagData> CreateTagData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      VectorOffset coverOffset = default(VectorOffset),
      StringOffset negativeOffset = default(StringOffset)) {
    builder.StartTable(4);
    TagData.AddNegative(builder, negativeOffset);
    TagData.AddCover(builder, coverOffset);
    TagData.AddType(builder, typeOffset);
    TagData.AddName(builder, nameOffset);
    return TagData.EndTagData(builder);
  }

  public static void StartTagData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddCover(FlatBufferBuilder builder, VectorOffset coverOffset) { builder.AddOffset(2, coverOffset.Value, 0); }
  public static VectorOffset CreateCoverVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCoverVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCoverVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNegative(FlatBufferBuilder builder, StringOffset negativeOffset) { builder.AddOffset(3, negativeOffset.Value, 0); }
  public static Offset<MiaoCsharp.TagData> EndTagData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MiaoCsharp.TagData>(o);
  }
};


}
